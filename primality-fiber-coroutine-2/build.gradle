apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"

group "org.iii"
version "0.0.1-SNAPSHOT"

sourceCompatibility = 1.8

apply plugin: "application"
mainClassName = "org.iii.PrimalityFiberApplication"

/*
jar {
    manifest {
        attributes "Main-Class": "org.iii.PrimalityFiberApplication"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
*/

repositories {
    mavenCentral()
}

configurations { quasar }

dependencies {
    compile("org.apache.activemq:activemq-broker:5.15.6")
    compile("org.apache.activemq:activemq-jms-pool:5.15.6")
    compile("org.apache.activemq:activemq-pool:5.15.6")

    compile("com.google.guava:guava:20.0")

    compile("org.slf4j:slf4j-api:1.7.25")
    compile("org.slf4j:log4j-over-slf4j:1.7.25")

    compile("com.fasterxml.jackson.core:jackson-databind:2.9.6")
    compile("com.fasterxml.jackson.core:jackson-core:2.9.6")
    compile("com.fasterxml.jackson.core:jackson-annotations:2.9.6")

    compile("co.paralleluniverse:quasar-core:0.7.10:jdk8")
    quasar("co.paralleluniverse:quasar-core:0.7.10:jdk8@jar")

    compileOnly("org.projectlombok:lombok:1.16.20")

    testCompile("junit:junit:4.12")
}

/* instrument with JavaAgent
test {
    jvmArgs = ["-javaagent:${configurations.quasar.singleFile}"]
}
*/

/* AOT */
compileJava.dependsOn processResources
compileJava {
    doLast {
        ant.taskdef(name: "instrumentation",
                classname: "co.paralleluniverse.fibers.instrument.InstrumentationTask",
                classpath: configurations.compile.asPath)
        ant.instrumentation(verbose: "true", check: "true", debug: "true") {
            fileset(dir: sourceSets.main.output.classesDirs.singleFile)
        }
    }
}
compileTestJava.dependsOn processTestResources
compileTestJava {
    doLast {
        ant.taskdef(name: "instrumentation",
                classname: "co.paralleluniverse.fibers.instrument.InstrumentationTask",
                classpath: configurations.testCompile.asPath)
        ant.instrumentation(verbose: "true", check: "true", debug: "true") {
            fileset(dir: sourceSets.test.output.classesDirs.singleFile)
        }
    }
}


task copyQuasar(type: Copy) {
    into "$projectDir/lib"
    from configurations.quasar
}
build.finalizedBy(copyQuasar)
